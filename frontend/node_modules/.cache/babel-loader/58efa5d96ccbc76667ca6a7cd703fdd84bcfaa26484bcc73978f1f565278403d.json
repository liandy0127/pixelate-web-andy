{"ast":null,"code":"import React,{useState}from\"react\";import\"./Dashboard.css\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Dashboard=()=>{// currently email is captures in the React state variable email \n// should save this to API and then to some database\nconst[email,setEmail]=useState(\"\");const[submitted,setSubmitted]=useState(false);const[error,setError]=useState(\"\");const[isLoading,setIsLoading]=useState(false);const handleEmailChange=e=>{setEmail(e.target.value);setError(\"\");// Clear error when user types\n};const handleSubmit=async e=>{e.preventDefault();// Clear previous error\nsetError(\"\");// Check if email is empty\nif(!email.trim()){setError(\"Email is required\");return;}// Validate email format\nconst emailRegex=/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;if(!emailRegex.test(email)){setError(\"Please enter a valid email address\");return;}// Set loading state\nsetIsLoading(true);try{// Send the email to AWS API\nconst response=await fetch('https://6nvy3g7dq3.execute-api.us-east-2.amazonaws.com/prod/submit-email',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({email})});// With no-cors, you can't check response.ok\n// So we'll just assume it worked\nsetSubmitted(true);setEmail(\"\");}catch(err){console.error('Error submitting email:',err);setError(\"Failed to join waiting list. Please try again later.\");}finally{setIsLoading(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container\",children:[/*#__PURE__*/_jsxs(\"video\",{className:\"video-background\",autoPlay:true,loop:true,muted:true,children:[/*#__PURE__*/_jsx(\"source\",{src:\"/images/other-background.mp4\",type:\"video/mp4\"}),\"Your browser does not support the video tag.\"]}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Welcome to your Dashboard!\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Our products will be coming soon!\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"waiting-list-container\",children:[/*#__PURE__*/_jsx(\"h3\",{children:\"Join Our Waiting List\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Be the first to test our beta version when it's released.\"}),!submitted?/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSubmit,className:\"waiting-list-form\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"form-group\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"email\",value:email,onChange:handleEmailChange,placeholder:\"Enter your email address\",className:error?\"email-input error\":\"email-input\",required:true}),error&&/*#__PURE__*/_jsxs(\"p\",{className:\"error-message\",children:[/*#__PURE__*/_jsx(\"i\",{className:\"fas fa-exclamation-circle\"}),\" \",error]})]}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",className:\"submit-button\",disabled:isLoading,children:isLoading?\"Submitting...\":\"Join Waiting List\"})]}):/*#__PURE__*/_jsx(\"div\",{className:\"success-message\",children:/*#__PURE__*/_jsx(\"p\",{children:\"Thank you for joining our waiting list! We'll notify you when our beta version is ready.\"})})]})]})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","jsx","_jsx","jsxs","_jsxs","Dashboard","email","setEmail","submitted","setSubmitted","error","setError","isLoading","setIsLoading","handleEmailChange","e","target","value","handleSubmit","preventDefault","trim","emailRegex","test","response","fetch","method","headers","body","JSON","stringify","err","console","className","children","autoPlay","loop","muted","src","type","onSubmit","onChange","placeholder","required","disabled"],"sources":["/Users/shijiali/Desktop/pixelate/startup-website/pixelate-web-Andy/frontend/src/pages/Dashboard/Dashboard.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport \"./Dashboard.css\";\n\nconst Dashboard = () => {\n\n  // currently email is captures in the React state variable email \n  // should save this to API and then to some database\n  const [email, setEmail] = useState(\"\");\n  const [submitted, setSubmitted] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n\n  const handleEmailChange = (e) => {\n    setEmail(e.target.value);\n    setError(\"\"); // Clear error when user types\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    // Clear previous error\n    setError(\"\");\n\n    // Check if email is empty\n    if (!email.trim()) {\n      setError(\"Email is required\");\n      return;\n    }\n\n    // Validate email format\n    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    if (!emailRegex.test(email)) {\n      setError(\"Please enter a valid email address\");\n      return;\n    }\n\n    // Set loading state\n    setIsLoading(true);\n\n    try {\n      // Send the email to AWS API\n      const response = await fetch('https://6nvy3g7dq3.execute-api.us-east-2.amazonaws.com/prod/submit-email', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ email }),\n      });\n\n      // With no-cors, you can't check response.ok\n      // So we'll just assume it worked\n      setSubmitted(true);\n      setEmail(\"\");\n    } catch (err) {\n      console.error('Error submitting email:', err);\n      setError(\"Failed to join waiting list. Please try again later.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"dashboard-container\">\n      <video className=\"video-background\" autoPlay loop muted>\n        <source src=\"/images/other-background.mp4\" type=\"video/mp4\" />\n        Your browser does not support the video tag.\n      </video>\n\n      <div className=\"dashboard-content\">\n        <h2>Welcome to your Dashboard!</h2>\n        <p>Our products will be coming soon!</p>\n\n        <div className=\"waiting-list-container\">\n          <h3>Join Our Waiting List</h3>\n          <p>Be the first to test our beta version when it's released.</p>\n\n          {!submitted ? (\n            <form onSubmit={handleSubmit} className=\"waiting-list-form\">\n              <div className=\"form-group\">\n                <input\n                  type=\"email\"\n                  value={email}\n                  onChange={handleEmailChange}\n                  placeholder=\"Enter your email address\"\n                  className={error ? \"email-input error\" : \"email-input\"}\n                  required\n                />\n                {error && (\n                  <p className=\"error-message\">\n                    <i className=\"fas fa-exclamation-circle\"></i> {error}\n                  </p>\n                )}\n              </div>\n              <button\n                type=\"submit\"\n                className=\"submit-button\"\n                disabled={isLoading}\n              >\n                {isLoading ? \"Submitting...\" : \"Join Waiting List\"}\n              </button>\n            </form>\n          ) : (\n            <div className=\"success-message\">\n              <p>Thank you for joining our waiting list! We'll notify you when our beta version is ready.</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Dashboard;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}